DELIMITER $$
CREATE TRIGGER check_hotel_deletion
BEFORE DELETE ON hotel
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM room WHERE hotel_id = OLD.hotel_id) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete hotel with existing rooms. Please delete rooms first.';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER check_customer_deletion
BEFORE DELETE ON customer
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1 FROM booking WHERE sin = OLD.sin AND status != 'Cancelled'
    ) OR EXISTS (
        SELECT 1 FROM renting WHERE sin = OLD.sin AND check_out_date > CURRENT_DATE()
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete customer with active bookings or rentals.';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER archive_booking
AFTER UPDATE ON booking
FOR EACH ROW
BEGIN
    IF NEW.status = 'Completed' AND (OLD.status IS NULL OR OLD.status <> 'Completed') THEN
        INSERT INTO archive (booking_id, renting_id) VALUES (NEW.booking_id, NULL);
        SET @archive_id = LAST_INSERT_ID();
        INSERT INTO stored_as (archive_id, booking_id, renting_id) VALUES (@archive_id, NEW.booking_id, NULL);
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER maintain_hotel_count_after_insert
AFTER INSERT ON hotel
FOR EACH ROW
BEGIN
    UPDATE hotel_chain
    SET number_of_hotels = number_of_hotels + 1
    WHERE chain_id = NEW.chain_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER maintain_hotel_count_after_delete
AFTER DELETE ON hotel
FOR EACH ROW
BEGIN
    UPDATE hotel_chain
    SET number_of_hotels = number_of_hotels - 1
    WHERE chain_id = OLD.chain_id;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER prevent_booking_conflict_before_insert
BEFORE INSERT ON booking
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1 FROM booking
        WHERE room_id = NEW.room_id
          AND status != 'Cancelled'
          AND NEW.start_date < end_date
          AND NEW.end_date > start_date
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Room is already booked for this time period.';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER prevent_booking_conflict_before_update
BEFORE UPDATE ON booking
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1 FROM booking
        WHERE room_id = NEW.room_id
          AND booking_id <> NEW.booking_id
          AND status != 'Cancelled'
          AND NEW.start_date < end_date
          AND NEW.end_date > start_date
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Room is already booked for this time period.';
    END IF;
END$$
DELIMITER ;




